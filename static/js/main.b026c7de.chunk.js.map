{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","setNewTitle","edit","setEdit","autoFocus","onBlur","onDoubleClick","Todolist","updateTodolist","id","removeTodolist","tasks","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","taskID","updateTask","updateTaskHandler","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","el","changeStatus","find","todolist","tl","newID","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b026c7de.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (newTitle: string) => void\r\n    // id: string\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== '') {\r\n            props.callBack(newTitle);\r\n            //props.callBack(newTitle)\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : ''}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack:(newTitle:string)=>void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [newTitle, setNewTitle] = useState(props.title)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const turnOnHandler = () => {\r\n        setEdit(true)\r\n    }\r\n    const turnOffHandler = () => {\r\n        setEdit(false)\r\n        props.callBack(newTitle)\r\n    }\r\n    let [edit, setEdit] = useState(false)\r\n    return (\r\n        edit\r\n            ? <input value={newTitle}\r\n                     onChange={onChangeHandler}\r\n                     autoFocus onBlur={turnOffHandler}/>\r\n            : <span onDoubleClick={turnOnHandler}>{props.title}</span>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from './components/EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask:(todolistId: string, taskID:string, newTitle:string)=>void\r\n    updateTodolist:(todolistId: string,newTitle:string)=>void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    // let [title, setTitle] = useState(\"\")\r\n    //let [error, setError] = useState<string | null>(null)\r\n\r\n    // const addTask = () => {\r\n    //     let newTitle = title.trim();\r\n    //     if (newTitle !== \"\") {\r\n    //         props.addTask(newTitle, props.id);\r\n    //         setTitle(\"\");\r\n    //     } else {\r\n    //         setError(\"Title is required\");\r\n    //     }\r\n    // }\r\n\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n\r\n    // const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     if (e.charCode === 13) {\r\n    //         addTask();\r\n    //     }\r\n    // }\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const addTaskHandler=(newTitle: string)=>{\r\n        props.addTask(newTitle, props.id)\r\n    }\r\nconst updateTaskHandler=(taskID:string, newTitle:string)=> {\r\n    props.updateTask(props.id, taskID, newTitle)\r\n}\r\n    const updateTitleHandler=(newTitle:string)=>{\r\n        props.updateTodolist(props.id,newTitle)\r\n}\r\n    return (\r\n    <div>\r\n        <h3>\r\n        {/*{props.title}*/}\r\n            <EditableSpan title={props.title} callBack={updateTitleHandler}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        {/*<div>*/}\r\n        {/*    <input value={title}*/}\r\n        {/*           onChange={onChangeHandler}*/}\r\n        {/*           onKeyPress={onKeyPressHandler}*/}\r\n        {/*           className={error ? \"error\" : \"\"}*/}\r\n        {/*    />*/}\r\n        {/*    <button onClick={addTask}>+</button>*/}\r\n        {/*    {error && <div className=\"error-message\">{error}</div>}*/}\r\n        {/*</div>*/}\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        {/*<span>{t.title}</span>*/}\r\n                        <EditableSpan title={t.title} callBack={(newTitle)=>updateTaskHandler(t.id, newTitle)}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/AddItemForm';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    const addTodolist=(newTitle:string)=>{\r\n        let newID=v1()\r\n        setTodolists([{id: newID, title: newTitle, filter: \"all\"}, ...todolists])\r\n        setTasks({...tasks,[newID]: []})\r\n    }\r\n    const updateTask=(todolistId: string, taskID:string, newTitle:string)=>{\r\n        setTasks({...tasks,[todolistId]: tasks[todolistId].map(el=>el.id===taskID?{...el,title:newTitle}:el)})\r\n    }\r\n    const updateTodolist=(todolistId: string, newTitle:string)=>{\r\n        setTodolists(todolists.map(el=>el.id===todolistId?{...el,title:newTitle}:el))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callBack={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTask={updateTask}\r\n                        updateTodolist={updateTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}