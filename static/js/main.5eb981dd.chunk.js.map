{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","label","helperText","size","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","variant","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","aria-label","removeTodolist","addTask","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId","todolistTasks","setTasks","task","v1","todolist","todolists","find","tl","setTodolists","changeStatus","newTitle","todolistId1","todolistId2","newTodolistId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5eb981dd.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Title\"\r\n            error={!!error}\r\n            helperText={error}\r\n            size={'small'}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            // className={error ? 'error' : ''}\r\n        />\r\n\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n        {/*<Button*/}\r\n        {/*    style={{maxWidth: '42px', maxHeight: '42px', minWidth: '42px', minHeight: '42px', backgroundColor: 'brown'}}*/}\r\n        {/*    variant=\"contained\" color=\"primary\" onClick={addItem}>+</Button>*/}\r\n\r\n        {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?<TextField id=\"outlined-basic\" label=\"Outlined\" value={title} variant=\"outlined\" onChange={changeTitle} autoFocus onBlur={activateViewMode} size={\"small\"}/>\r\n        // <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                <DeleteIcon />\r\n            </IconButton>\r\n            {/*<Button variant=\"contained\" color=\"primary\" style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth:\"30px\", minHeight: \"30px\",}}onClick={removeTodolist}>x</Button>*/}\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            onChange={onChangeHandler}\r\n                            color=\"primary\"\r\n                            checked={t.isDone}/>\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all'?\"outlined\":\"contained\"} color=\"error\"\r\n                onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === 'active'?\"outlined\":\"contained\"} color=\"secondary\"\r\n                onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed'?\"outlined\":\"contained\"} color=\"primary\"\r\n                onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n\r\n            {/*<button className={props.filter === 'all' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onAllClickHandler}>All*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'active' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onActiveClickHandler}>Active*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'completed' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onCompletedClickHandler}>Completed*/}\r\n            {/*</button>*/}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist} />\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}